<tokens>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> state </identifier>
  <symbol> = </symbol>
  <stringConstant> negative </stringConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <integerConstant> 42 </integerConstant>
  <symbol> ; </symbol>
  <keyword> do </keyword>
  <identifier> Screen </identifier>
  <symbol> . </symbol>
  <identifier> drawRectangle </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> size </identifier>
  <symbol> , </symbol>
  <identifier> size </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> message </identifier>
  <symbol> = </symbol>
  <stringConstant> Hello, World! </stringConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> z </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> y </identifier>
  <symbol> * </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> - </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <keyword> true </keyword>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> let </keyword>
  <identifier> result </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> let </keyword>
  <identifier> my_variable </identifier>
  <symbol> = </symbol>
  <integerConstant> 100 </integerConstant>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> sum </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> + </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <identifier> e </identifier>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ^ </symbol>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> + </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> let </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> # </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
</tokens>